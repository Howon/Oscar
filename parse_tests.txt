use command:
menhir --interpret --interpret-show-cst parser.mly

-----blank message-----
message hello()

TYPE_MESSAGE ID LPAREN RPAREN


[program:
  [messages:
    [message_list:
      [message_decl: TYPE_MESSAGE ID LPAREN [formals_opt:] RPAREN]
    ]
  ]
  [actors:]
  [functions:]
  EOF
]


-----blank actor-----
actor Oscar() {
  recieve = {
  }
}

TYPE_ACTOR ID LPAREN RPAREN LBRACE ACT_RECEIVE ASSIGN LBRACE RBRACE RBRACE
ACCEPT

[program:
  [messages:]
  [actors:
    [actor_list:
      [actor_decl:
        TYPE_ACTOR
        ID
        LPAREN
        [formals_opt:]
        RPAREN
        LBRACE
        [mut_vdecl_list:]
        [functions:]
        [receive: ACT_RECEIVE ASSIGN LBRACE [pattern_opt:] RBRACE]
        RBRACE
      ]
    ]
  ]
  [functions:]
  EOF
]


-----Actor definition with receive and one pattern-----
actor Oscar() {
  recieve = {
    | hello() => { 1; }
  }
}

TYPE_ACTOR ID LPAREN RPAREN LBRACE ACT_RECEIVE ASSIGN LBRACE BITWISE_OR ID LPAREN RPAREN FUNC_RET_TYPE LBRACE INT_LIT PUNC_SEMI RBRACE RBRACE RBRACE

[program:
  [messages:]
  [actors:
    [actor_list:
      [actor_decl:
        TYPE_ACTOR
        ID
        LPAREN
        [formals_opt:]
        RPAREN
        LBRACE
        [mut_vdecl_list:]
        [functions:]
        [receive:
          ACT_RECEIVE
          ASSIGN
          LBRACE
          [pattern_opt:
            [pattern_list:
              [pattern:
                BITWISE_OR
                ID
                LPAREN
                [formals_opt:]
                RPAREN
                FUNC_RET_TYPE
                LBRACE
                [stmt_list: [stmt_list:] [stmt: [expr: INT_LIT] PUNC_SEMI]]
                RBRACE
              ]
            ]
          ]
          RBRACE
        ]
        RBRACE
      ]
    ]
  ]
  [functions:]
  EOF
]


-----blank function-----
def func() => int = {return 1 | 2;}

TYPE_DEF ID LPAREN RPAREN FUNC_RET_TYPE TYPE_INT ASSIGN LBRACE RETURN INT_LIT BITWISE_OR INT_LIT PUNC_SEMI RBRACE

[program:
  [messages:]
  [actors:]
  [functions:
    [function_list:
      [fdecl:
        TYPE_DEF
        ID
        LPAREN
        [formals_opt:]
        RPAREN
        FUNC_RET_TYPE
        [typ: [simple_typ: TYPE_INT]]
        ASSIGN
        LBRACE
        [stmt_list:]
        RBRACE
      ]
    ]
  ]
  EOF
]


-----function with one-line lambda inside it-----
def func() => int = {
  return map.((a: int) => int = {return a + 2;}, 5);
}

TYPE_DEF ID LPAREN RPAREN FUNC_RET_TYPE TYPE_INT ASSIGN LBRACE RETURN ID LPAREN LPAREN ID FUNC_ARG_TYPE TYPE_INT RPAREN FUNC_RET_TYPE TYPE_INT ASSIGN LBRACE RETURN ID ARITH_PLUS INT_LIT PUNC_SEMI RBRACE PUNC_COMMA INT_LIT RPAREN PUNC_SEMI RBRACE

[program:
  [messages:]
  [actors:]
  [functions:
    [function_list:
      [fdecl:
        TYPE_DEF
        ID
        LPAREN
        [formals_opt:]
        RPAREN
        FUNC_RET_TYPE
        [typ: [simple_typ: TYPE_INT]]
        ASSIGN
        LBRACE
        [stmt_list:
          [stmt_list:]
          [stmt:
            [expr:
              [lambda:
                LPAREN
                LPAREN
                [formals_opt:
                  [formal_list: ID FUNC_ARG_TYPE [typ: [simple_typ: TYPE_INT]]]
                ]
                RPAREN
                FUNC_RET_TYPE
                [typ: [simple_typ: TYPE_INT]]
                ASSIGN
                [expr: [expr: INT_LIT] ARITH_PLUS [expr: INT_LIT]]
                RPAREN
              ]
            ]
            PUNC_SEMI
          ]
        ]
        RBRACE
      ]
    ]
  ]
  EOF
]
